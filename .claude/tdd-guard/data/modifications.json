{
  "session_id": "18bf9cea-ffab-4eef-900e-da7c2ae194e6",
  "transcript_path": "/home/family/.claude/projects/-home-family-src-serverless-cookbook/18bf9cea-ffab-4eef-900e-da7c2ae194e6.jsonl",
  "hook_event_name": "PostToolUse",
  "tool_name": "Edit",
  "tool_input": {
    "file_path": "/home/family/src/serverless-cookbook/src/github-graphql-enhanced.test.ts",
    "old_string": "    expect(mockGraphqlClient).toHaveBeenCalledTimes(3); // 2 failures + 1 success\n  }, 10000);\n});",
    "new_string": "    expect(mockGraphqlClient).toHaveBeenCalledTimes(3); // 2 failures + 1 success\n  }, 10000);\n\n  it('should monitor and log rate limit information', async () => {\n    // Arrange\n    const responsWithRateLimit = {\n      repository: { object: { entries: [] } },\n      rateLimit: {\n        remaining: 4500,\n        limit: 5000,\n        cost: 1\n      }\n    };\n\n    const consoleSpy = vi.spyOn(console, 'log');\n    mockGraphqlClient.mockResolvedValue(responsWithRateLimit);\n\n    // Act\n    await Effect.runPromise(fetchTerraformPatternsWithRetries());\n\n    // Assert\n    expect(consoleSpy).toHaveBeenCalledWith(\n      expect.stringContaining('Rate limit: 4500/5000')\n    );\n    \n    consoleSpy.mockRestore();\n  });\n});"
  }
}